type AppUser implements Node {
	id: ID!
	firstName: String!
	lastName: String!
	friends: [AppUser!]!
	posts(after: String, before: String, first: Int, last: Int): PostConnection!
}

input AppUserInput {
	firstName: String!
	lastName: String!
}


type Comment implements Node {
	id: ID!
	referencedPost: Post!
	author: AppUser!
	createdOn: DateTime!
	content: String!
}

type CommentConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CommentEdge!]!
}

"""
An edge in a connection.
"""
type CommentEdge {
	"""
	The item at the end of the edge
	"""
	node: Comment!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CommentInput {
	author: ID!
	content: String!
	referencedPost: ID!
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime




interface Node {
	id: ID!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Post implements Node {
	id: ID!
	author: AppUser!
	createdOn: DateTime!
	content: String!
	comments(after: String, before: String, first: Int, last: Int): CommentConnection!
}

type PostConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PostEdge!]!
}

"""
An edge in a connection.
"""
type PostEdge {
	"""
	The item at the end of the edge
	"""
	node: Post!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input PostInput {
	author: ID!
	content: String!
}

type RootMutation {
	createUser(user: AppUserInput!): AppUser!
	createPost(post: PostInput!): PostEdge!
	createComment(comment: CommentInput!): CommentEdge!
}

type RootQuery {
	node(id: ID!): Node!
	user(id: ID!): AppUser!
}


schema {
	query: RootQuery
	mutation: RootMutation
}
